// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                 @id @default(cuid())
  name          String?
  email         String?                @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  participating ParticipantsOnEvents[]
  payments      ParticipantOnPayment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id       String @id @default(cuid())
  owner    User   @relation(fields: [ownerId], references: [id], onUpdate: NoAction)
  ownerId  String
  currency String
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  total     Decimal  @default(0.0)


  participants ParticipantsOnEvents[]
  payments     Payment[]
}

model ParticipantsOnEvents {
  event         Event    @relation(fields: [eventId], references: [id], onUpdate: NoAction)
  eventId       String
  participant   User     @relation(fields: [participantId], references: [id], onUpdate: NoAction)
  participantId String
  joinedAt      DateTime @default(now())
  total         Decimal  @default(0.0)

  @@id([eventId, participantId])
}

model Payment {
  id           String                 @id @default(cuid())
  eventId      String
  event        Event                  @relation(fields: [eventId], references: [id], onUpdate: NoAction)
  value        Decimal                @default(0.0)
  participants ParticipantOnPayment[]
}

model ParticipantOnPayment {
  payment   Payment @relation(fields: [paymentId], references: [id], onUpdate: NoAction)
  paymentId String

  participant   User   @relation(fields: [participantId], references: [id], onUpdate: NoAction)
  participantId String

  joinedAt DateTime @default(now())
  value    Decimal  @default(0.0)

  @@id([paymentId, participantId])
}
